<!doctype html><html xmlns="http://www.w3.org/1999/xhtml"><head>  <meta charset="utf-8">  <title>The HTML5 Herald</title></head><script src="Scripts/angular.js"></script><script>		//There is no class concept in Javascript, but we can create a function and we can create an instance of function.		// when we say class in Javascript, it makes a function structure( according to OOP in C# or Java), but act as a class		function Customer($scope,$rootScope)		{			//debugger;			$rootScope.counterOfroot=(($rootScope.counterOfroot || 0)+1);			///property of that function			$scope.custname="Alice";			$scope.custcode="1001";								//Here we create an inline function named 'SubmitNow'			$scope.SubmitNow=function()				{					if($scope.custname.length==0)					{							alert("Please give proper data :)");					}else					{						alert("Thanks for proper data");					}				}		}				var myApp=angular.module("myApp",[]);			//This is used initiate the ANGULAR operation.		myApp.controller("Customerobj",Customer);		//  instance_name.controller("controller_name_to _connect_with_UI", Class_name)				//here we are creating an instance of that javascript class [Customer]  which figuratively seems like function structure in Java or C#			/*	var custObj=new Customer();  */				//our intention is bind the customer object[custObj] with already declared Textbox in html body section.		//This kind of code , In c# concept called -known as behind code, some says controller code or GEL code.		//These following codes bind the code with UI object.	/*	function UItoObject()		{			custObj.custname=document.getElementById("custname").value;			custObj.custcode=document.getElementById("custcode").value;		}		function ObjectToUI()		{			document.getElementById("custname").innerHTML=custObj.custname;			document.getElementById("custcode").innerHTML=custObj.custcode;		}	*/			// If we are going to do it for table or grid , it will become more complex, Thats why, Angular introduced. It helps you greatly to bind UI and Objects for complex thing (for table and grid easily.				</script><body ng-app="myApp">		{{counterOfroot}}		<!--IN angularjs, first we need to bind the UI with customer class declare in Script file , so we create an instance/object of Class using ng-controller="Customer", it will act like var custObj=new Customer();-->		<!--so ng-controller="Customer" it will create an object internally from Customer class and bind it with UI div CustScreen	-->	<div id="CustScreen" ng-controller="Customerobj">		<!--Now we are going to bind the property of that declare class[Customer]. For that we are using ng-model="custname" and ng-model="custcode" 	-->			Customer Name:-<input ng-model="custname" type="text" id="custname1" />			Customer Code:-<input ng-model="custcode" type="text" id="custcode" />			<!-- var custObj=new Customer();	  means [ng-controller] -->			<!-- obj.custname=txtHtml			 means [ng-model]-->		<div id="DivcustomerName">{{custname}}</div>	<!-- [Expression] helps to display value anywhere in Html, ex: {{custname}} , it will show Customername in here whenever we put in textbox -->		<div id="DivcustomerCode">{{custcode}}</div>		{{5+6}}		<!-- it's also expression	-->		<br/>		<input type="button" ng-click="SubmitNow()" name="submit" value="submit" />  <!-- ng-click will allow to call the "SubmitNow()" function which is declared in script, it will generate in Angular dom and pass to HTML 																						DOM to make the work.-->	</div>		<div id="CustScreen" ng-controller="Customerobj">		<!--Now we are going to bind the property of that declare class[Customer]. For that we are using ng-model="custname" and ng-model="custcode" 	-->			Customer Name:-<input ng-model="custname" type="text" id="custname" />			Customer Code:-<input ng-model="custcode" type="text" id="custcode" />			<!-- var custObj=new Customer();	  means [ng-controller] -->			<!-- obj.custname=txtHtml			 means [ng-model]-->		<div id="DivcustomerName">{{custname}}</div>	<!-- [Expression] helps to display value anywhere in Html, ex: {{custname}} , it will show Customername in here whenever we put in textbox -->		<div id="DivcustomerCode">{{custcode}}</div>	</div>	 </body></html>